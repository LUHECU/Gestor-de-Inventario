--------------------------------------------------------
-- Archivo creado  - Wednesday-May-01-2024   
--------------------------------------------------------
--------------------------------------------------------
--  DDL for Sequence SEQ_CONSECUTIVO
--------------------------------------------------------
   -- Esta secuencia se utiliza para generar valores únicos incrementales.
   CREATE SEQUENCE  "SEQ_CONSECUTIVO"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_IDFACTURA
--------------------------------------------------------
    -- Esta secuencia se utiliza para generar identificadores únicos de factura.
   CREATE SEQUENCE  "SEQ_IDFACTURA"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 25 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_IDPRODUCTO
--------------------------------------------------------
    -- Esta secuencia se utiliza para generar identificadores únicos de producto.
   CREATE SEQUENCE  "SEQ_IDPRODUCTO"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 46 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_IDPROVEEDOR
--------------------------------------------------------
    -- Esta secuencia se utiliza para generar identificadores únicos de proveedor.
   CREATE SEQUENCE  "SEQ_IDPROVEEDOR"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 31 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_IDUSUARIO
--------------------------------------------------------
 -- Esta secuencia se utiliza para generar identificadores únicos de usuario.
   CREATE SEQUENCE  "SEQ_IDUSUARIO"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 11 START WITH 704 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_MOVIMIENTOINVENTARIO
--------------------------------------------------------
    -- Esta secuencia se utiliza para generar identificadores únicos de movimiento de inventario.
   CREATE SEQUENCE  "SEQ_MOVIMIENTOINVENTARIO"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Table CUENTASPROVEEDORES
--------------------------------------------------------
-- Esta tabla almacena información sobre las cuentas de los proveedores.
  CREATE TABLE "CUENTASPROVEEDORES" 
   (	"IDFACPROVEEDOR" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"ID_PROVEEDOR" NUMBER, 
	"FECHA_EMISION" DATE, 
	"MONTO" FLOAT(126), 
	"METODOPAGO" VARCHAR2(100 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PROYECTOPROGRA" ;
--------------------------------------------------------
--  DDL for Table MOVIMIENTOINVENTARIO
--------------------------------------------------------
-- Esta tabla registra los movimientos de inventario.
  CREATE TABLE "MOVIMIENTOINVENTARIO" 
   (	"IDMOVIMIENTO" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"FECHA" DATE DEFAULT SYSDATE, 
	"IDPRODUCTO" NUMBER, 
	"NOMBRE" VARCHAR2(100 BYTE), 
	"CANTIDAD" NUMBER, 
	"COSTO" FLOAT(126), 
	"PRECIOVENTA" FLOAT(126), 
	"NOMBREUSUARIO" VARCHAR2(50 BYTE), 
	"TIPOMOVIMIENTO" VARCHAR2(100 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PROYECTOPROGRA" ;
--------------------------------------------------------
--  DDL for Table PRODUCTOS
--------------------------------------------------------
-- Esta tabla almacena información sobre los productos.
  CREATE TABLE "PRODUCTOS" 
   (	"IDPRODUCTO" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"NOMBRE" VARCHAR2(100 BYTE), 
	"CANTIDAD" NUMBER, 
	"COSTO" FLOAT(126), 
	"PRECIOVENTA" FLOAT(126), 
	"ID_PROVEEDOR" NUMBER, 
	"AUDITORIA" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PROYECTOPROGRA" ;
--------------------------------------------------------
--  DDL for Table PROVEEDORES
--------------------------------------------------------
-- Esta tabla almacena información sobre los proveedores.
  CREATE TABLE "PROVEEDORES" 
   (	"IDPROVEEDOR" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"NOMBRE" VARCHAR2(100 BYTE), 
	"ASESOR" VARCHAR2(100 BYTE), 
	"UBICACION" VARCHAR2(200 BYTE), 
	"EMAIL" VARCHAR2(100 BYTE), 
	"TELEFONO" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PROYECTOPROGRA" ;
--------------------------------------------------------
--  DDL for Table USUARIOS
--------------------------------------------------------
-- Esta tabla almacena información sobre los usuarios del sistema.
  CREATE TABLE "USUARIOS" 
   (	"IDUSUARIO" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"CEDULA" VARCHAR2(35 BYTE), 
	"NOMBRE" VARCHAR2(50 BYTE), 
	"ROL" VARCHAR2(50 BYTE), 
	"EMAIL" VARCHAR2(50 BYTE), 
	"CONTRASENA" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PROYECTOPROGRA" ;
--------------------------------------------------------
--  DDL for View PRODUCTOPRECIOMAYOR
--------------------------------------------------------
 -- Esta vista muestra información sobre el producto con precio superior por proveedor al promedio de los productos con mayor precio.
  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "PRODUCTOPRECIOMAYOR" ("IDPRODUCTO", "IDPROVEEDOR", "PROVEEDOR", "PRODUCTO", "COSTO", "PRECIOMAXIMO") AS 
  SELECT pr.idproducto idProducto, pr.id_proveedor idProveedor, pv.nombre Proveedor, pr.nombre Producto, pr.costo Costo, Max(pr.precioVenta) PrecioMaximo 
    FROM proveedores pv
    INNER JOIN productos pr
    ON pr.id_proveedor = pv.idproveedor
    WHERE pr.precioVenta >=    (   SELECT AVG(precioVentaMaximo) 
                                FROM (  SELECT id_proveedor, MAX(precioVenta) precioVentaMaximo 
                                        FROM productos GROUP BY id_proveedor
                                      )
                            )
    GROUP BY pr.idproducto, pr.id_proveedor, pv.nombre, pr.nombre, pr.costo
    HAVING (pr.id_proveedor, Max(pr.precioVenta)) IN (  SELECT id_proveedor, Max(precioVenta)
                                                FROM productos
                                                GROUP BY id_proveedor)
;
--------------------------------------------------------
--  DDL for View PRODUCTOPRECIOMENOR
--------------------------------------------------------
-- Esta vista muestra información sobre el producto con precio inferior por proveedor al promedio de los productos con menor precio.
  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "PRODUCTOPRECIOMENOR" ("IDPRODUCTO", "IDPROVEEDOR", "PROVEEDOR", "PRODUCTO", "COSTO", "PRECIOMINIMO") AS 
  SELECT pr.idproducto idProducto, pr.id_proveedor idProveedor, pv.nombre Proveedor, pr.nombre Producto, pr.costo Costo, Min(pr.precioVenta) PrecioMinimo 
    FROM proveedores pv
    INNER JOIN productos pr
    ON pr.id_proveedor = pv.idproveedor
    WHERE pr.precioVenta <=    (   SELECT AVG(precioVentaMinimo) 
                                FROM (  SELECT id_proveedor, Min(precioVenta) precioVentaMinimo 
                                        FROM productos GROUP BY id_proveedor
                                      )
                            )
    GROUP BY pr.idproducto, pr.id_proveedor, pv.nombre, pr.nombre, pr.costo
    HAVING (pr.id_proveedor, Min(pr.precioVenta)) IN (  SELECT id_proveedor, Min(precioVenta)
                                                FROM productos
                                                GROUP BY id_proveedor)
;
--------------------------------------------------------
--  DDL for View PRODUCTOSPRECIOMAYORPROMEDIO
--------------------------------------------------------
 -- Esta vista muestra información sobre los productos cuyo precio de venta es mayor que el promedio.
  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "PRODUCTOSPRECIOMAYORPROMEDIO" ("IDPRODUCTO", "NOMBREPRODUCTO", "COSTOPRODUCTO", "PRECIOVENTA", "NOMBREPROVEEDOR", "UBICACIONPROVEEDOR") AS 
  select pr.idproducto as idproducto, pr.nombre as nombreproducto, pr.costo as costoproducto, pr.precioventa as precioventa,
       pv.nombre as nombreproveedor, pv.ubicacion as ubicacionproveedor
from productos pr
inner join proveedores pv on pr.id_proveedor = pv.idproveedor
where pr.precioventa > (select avg(precioventa) from productos)
order by pr.precioventa desc
;
REM INSERTING into CUENTASPROVEEDORES
SET DEFINE OFF;
Insert into CUENTASPROVEEDORES (IDFACPROVEEDOR,ID_PROVEEDOR,FECHA_EMISION,MONTO,METODOPAGO) values (5,1,to_date('30/04/24','DD/MM/RR'),15,'Transferencia');
commit;
REM INSERTING into MOVIMIENTOINVENTARIO
SET DEFINE OFF;

--Inserción de datos en la tabla "MOVIMIENTOINVENTARIO"
Insert into MOVIMIENTOINVENTARIO (IDMOVIMIENTO,FECHA,IDPRODUCTO,NOMBRE,CANTIDAD,COSTO,PRECIOVENTA,NOMBREUSUARIO,TIPOMOVIMIENTO) values (86,to_date('30/04/24','DD/MM/RR'),1,'Taza personalizada',50,5000,8000,'gulatev','Inserción');
Insert into MOVIMIENTOINVENTARIO (IDMOVIMIENTO,FECHA,IDPRODUCTO,NOMBRE,CANTIDAD,COSTO,PRECIOVENTA,NOMBREUSUARIO,TIPOMOVIMIENTO) values (87,to_date('30/04/24','DD/MM/RR'),2,'Camiseta estampada',30,10000,15000,'gulatev','Inserción');
Insert into MOVIMIENTOINVENTARIO (IDMOVIMIENTO,FECHA,IDPRODUCTO,NOMBRE,CANTIDAD,COSTO,PRECIOVENTA,NOMBREUSUARIO,TIPOMOVIMIENTO) values (88,to_date('30/04/24','DD/MM/RR'),3,'Llavero grabado',20,3000,5000,'gulatev','Inserción');
Insert into MOVIMIENTOINVENTARIO (IDMOVIMIENTO,FECHA,IDPRODUCTO,NOMBRE,CANTIDAD,COSTO,PRECIOVENTA,NOMBREUSUARIO,TIPOMOVIMIENTO) values (89,to_date('30/04/24','DD/MM/RR'),4,'Pulsera personalizada',40,7000,10000,'gulatev','Inserción');
Insert into MOVIMIENTOINVENTARIO (IDMOVIMIENTO,FECHA,IDPRODUCTO,NOMBRE,CANTIDAD,COSTO,PRECIOVENTA,NOMBREUSUARIO,TIPOMOVIMIENTO) values (90,to_date('30/04/24','DD/MM/RR'),5,'Cojín personalizada',60,12000,18000,'gulatev','Inserción');
Insert into MOVIMIENTOINVENTARIO (IDMOVIMIENTO,FECHA,IDPRODUCTO,NOMBRE,CANTIDAD,COSTO,PRECIOVENTA,NOMBREUSUARIO,TIPOMOVIMIENTO) values (91,to_date('30/04/24','DD/MM/RR'),6,'Estuche para celular estampado',25,4000,7000,'gulatev','Inserción');
Insert into MOVIMIENTOINVENTARIO (IDMOVIMIENTO,FECHA,IDPRODUCTO,NOMBRE,CANTIDAD,COSTO,PRECIOVENTA,NOMBREUSUARIO,TIPOMOVIMIENTO) values (92,to_date('30/04/24','DD/MM/RR'),7,'Bufanda personalizada',35,8000,10000,'gulatev','Inserción');
Insert into MOVIMIENTOINVENTARIO (IDMOVIMIENTO,FECHA,IDPRODUCTO,NOMBRE,CANTIDAD,COSTO,PRECIOVENTA,NOMBREUSUARIO,TIPOMOVIMIENTO) values (93,to_date('30/04/24','DD/MM/RR'),8,'Vaso grabado',45,6000,9000,'gulatev','Inserción');
Insert into MOVIMIENTOINVENTARIO (IDMOVIMIENTO,FECHA,IDPRODUCTO,NOMBRE,CANTIDAD,COSTO,PRECIOVENTA,NOMBREUSUARIO,TIPOMOVIMIENTO) values (94,to_date('30/04/24','DD/MM/RR'),9,'Gorra personalizada',55,9000,14000,'gulatev','Inserción');
Insert into MOVIMIENTOINVENTARIO (IDMOVIMIENTO,FECHA,IDPRODUCTO,NOMBRE,CANTIDAD,COSTO,PRECIOVENTA,NOMBREUSUARIO,TIPOMOVIMIENTO) values (95,to_date('30/04/24','DD/MM/RR'),10,'Llavero personalizado',15,4000,7000,'gulatev','Inserción');
Insert into MOVIMIENTOINVENTARIO (IDMOVIMIENTO,FECHA,IDPRODUCTO,NOMBRE,CANTIDAD,COSTO,PRECIOVENTA,NOMBREUSUARIO,TIPOMOVIMIENTO) values (96,to_date('30/04/24','DD/MM/RR'),11,'Porta retratos decorado',70,11000,17000,'gulatev','Inserción');
Insert into MOVIMIENTOINVENTARIO (IDMOVIMIENTO,FECHA,IDPRODUCTO,NOMBRE,CANTIDAD,COSTO,PRECIOVENTA,NOMBREUSUARIO,TIPOMOVIMIENTO) values (97,to_date('30/04/24','DD/MM/RR'),12,'Mochila estampada',10,20000,30000,'gulatev','Inserción');
Insert into MOVIMIENTOINVENTARIO (IDMOVIMIENTO,FECHA,IDPRODUCTO,NOMBRE,CANTIDAD,COSTO,PRECIOVENTA,NOMBREUSUARIO,TIPOMOVIMIENTO) values (98,to_date('30/04/24','DD/MM/RR'),13,'Estuche para celular con foto',20,3000,5000,'gulatev','Inserción');
Insert into MOVIMIENTOINVENTARIO (IDMOVIMIENTO,FECHA,IDPRODUCTO,NOMBRE,CANTIDAD,COSTO,PRECIOVENTA,NOMBREUSUARIO,TIPOMOVIMIENTO) values (99,to_date('30/04/24','DD/MM/RR'),14,'Mousepad personalizado',40,5000,8000,'gulatev','Inserción');
Insert into MOVIMIENTOINVENTARIO (IDMOVIMIENTO,FECHA,IDPRODUCTO,NOMBRE,CANTIDAD,COSTO,PRECIOVENTA,NOMBREUSUARIO,TIPOMOVIMIENTO) values (100,to_date('30/04/24','DD/MM/RR'),15,'Estuche para celular',50,7000,11000,'gulatev','Inserción');
Insert into MOVIMIENTOINVENTARIO (IDMOVIMIENTO,FECHA,IDPRODUCTO,NOMBRE,CANTIDAD,COSTO,PRECIOVENTA,NOMBREUSUARIO,TIPOMOVIMIENTO) values (101,to_date('30/04/24','DD/MM/RR'),16,'Blusa personalizado',30,6000,22000,'gulatev','Inserción');
Insert into MOVIMIENTOINVENTARIO (IDMOVIMIENTO,FECHA,IDPRODUCTO,NOMBRE,CANTIDAD,COSTO,PRECIOVENTA,NOMBREUSUARIO,TIPOMOVIMIENTO) values (102,to_date('30/04/24','DD/MM/RR'),17,'Camisa personalizado',25,6000,10000,'gulatev','Inserción');
Insert into MOVIMIENTOINVENTARIO (IDMOVIMIENTO,FECHA,IDPRODUCTO,NOMBRE,CANTIDAD,COSTO,PRECIOVENTA,NOMBREUSUARIO,TIPOMOVIMIENTO) values (103,to_date('30/04/24','DD/MM/RR'),18,'Chaqueta personalizada',35,18000,27000,'gulatev','Inserción');
Insert into MOVIMIENTOINVENTARIO (IDMOVIMIENTO,FECHA,IDPRODUCTO,NOMBRE,CANTIDAD,COSTO,PRECIOVENTA,NOMBREUSUARIO,TIPOMOVIMIENTO) values (104,to_date('30/04/24','DD/MM/RR'),19,'Uniforme escolar personalizada',45,15000,20000,'gulatev','Inserción');
Insert into MOVIMIENTOINVENTARIO (IDMOVIMIENTO,FECHA,IDPRODUCTO,NOMBRE,CANTIDAD,COSTO,PRECIOVENTA,NOMBREUSUARIO,TIPOMOVIMIENTO) values (105,to_date('30/04/24','DD/MM/RR'),20,'Llavero con foto',20,4000,6000,'gulatev','Inserción');
Insert into MOVIMIENTOINVENTARIO (IDMOVIMIENTO,FECHA,IDPRODUCTO,NOMBRE,CANTIDAD,COSTO,PRECIOVENTA,NOMBREUSUARIO,TIPOMOVIMIENTO) values (106,to_date('30/04/24','DD/MM/RR'),21,'Taza termosensible',65,8000,13000,'gulatev','Inserción');
Insert into MOVIMIENTOINVENTARIO (IDMOVIMIENTO,FECHA,IDPRODUCTO,NOMBRE,CANTIDAD,COSTO,PRECIOVENTA,NOMBREUSUARIO,TIPOMOVIMIENTO) values (107,to_date('30/04/24','DD/MM/RR'),22,'Botella de agua grabada',15,10000,16000,'gulatev','Inserción');
Insert into MOVIMIENTOINVENTARIO (IDMOVIMIENTO,FECHA,IDPRODUCTO,NOMBRE,CANTIDAD,COSTO,PRECIOVENTA,NOMBREUSUARIO,TIPOMOVIMIENTO) values (108,to_date('30/04/24','DD/MM/RR'),23,'Ropas tipicas personalizado',55,12000,20000,'gulatev','Inserción');
Insert into MOVIMIENTOINVENTARIO (IDMOVIMIENTO,FECHA,IDPRODUCTO,NOMBRE,CANTIDAD,COSTO,PRECIOVENTA,NOMBREUSUARIO,TIPOMOVIMIENTO) values (109,to_date('30/04/24','DD/MM/RR'),24,'Cojín pintada',35,15000,23000,'gulatev','Inserción');
Insert into MOVIMIENTOINVENTARIO (IDMOVIMIENTO,FECHA,IDPRODUCTO,NOMBRE,CANTIDAD,COSTO,PRECIOVENTA,NOMBREUSUARIO,TIPOMOVIMIENTO) values (110,to_date('30/04/24','DD/MM/RR'),25,'Almohada con mensaje',40,9000,15000,'gulatev','Inserción');
Insert into MOVIMIENTOINVENTARIO (IDMOVIMIENTO,FECHA,IDPRODUCTO,NOMBRE,CANTIDAD,COSTO,PRECIOVENTA,NOMBREUSUARIO,TIPOMOVIMIENTO) values (111,to_date('30/04/24','DD/MM/RR'),26,'PRUEBA1',3,5,10,'1','Inserción');
commit;
REM INSERTING into PRODUCTOS
SET DEFINE OFF;
--inserción de datos en la tabla "PRODUCTOS"
Insert into PRODUCTOS (IDPRODUCTO,NOMBRE,CANTIDAD,COSTO,PRECIOVENTA,ID_PROVEEDOR,AUDITORIA) values (1,'Taza personalizada',50,5000,8000,1,'gulatev');
Insert into PRODUCTOS (IDPRODUCTO,NOMBRE,CANTIDAD,COSTO,PRECIOVENTA,ID_PROVEEDOR,AUDITORIA) values (2,'Camiseta estampada',30,10000,15000,2,'gulatev');
Insert into PRODUCTOS (IDPRODUCTO,NOMBRE,CANTIDAD,COSTO,PRECIOVENTA,ID_PROVEEDOR,AUDITORIA) values (3,'Llavero grabado',20,3000,5000,6,'gulatev');
Insert into PRODUCTOS (IDPRODUCTO,NOMBRE,CANTIDAD,COSTO,PRECIOVENTA,ID_PROVEEDOR,AUDITORIA) values (4,'Pulsera personalizada',40,7000,10000,3,'gulatev');
Insert into PRODUCTOS (IDPRODUCTO,NOMBRE,CANTIDAD,COSTO,PRECIOVENTA,ID_PROVEEDOR,AUDITORIA) values (5,'Cojín personalizada',60,12000,18000,7,'gulatev');
Insert into PRODUCTOS (IDPRODUCTO,NOMBRE,CANTIDAD,COSTO,PRECIOVENTA,ID_PROVEEDOR,AUDITORIA) values (6,'Estuche para celular estampado',25,4000,7000,10,'gulatev');
Insert into PRODUCTOS (IDPRODUCTO,NOMBRE,CANTIDAD,COSTO,PRECIOVENTA,ID_PROVEEDOR,AUDITORIA) values (7,'Bufanda personalizada',35,8000,10000,3,'gulatev');
Insert into PRODUCTOS (IDPRODUCTO,NOMBRE,CANTIDAD,COSTO,PRECIOVENTA,ID_PROVEEDOR,AUDITORIA) values (8,'Vaso grabado',45,6000,9000,4,'gulatev');
Insert into PRODUCTOS (IDPRODUCTO,NOMBRE,CANTIDAD,COSTO,PRECIOVENTA,ID_PROVEEDOR,AUDITORIA) values (9,'Gorra personalizada',55,9000,14000,2,'gulatev');
Insert into PRODUCTOS (IDPRODUCTO,NOMBRE,CANTIDAD,COSTO,PRECIOVENTA,ID_PROVEEDOR,AUDITORIA) values (10,'Llavero personalizado',15,4000,7000,5,'gulatev');
Insert into PRODUCTOS (IDPRODUCTO,NOMBRE,CANTIDAD,COSTO,PRECIOVENTA,ID_PROVEEDOR,AUDITORIA) values (11,'Porta retratos decorado',70,11000,17000,4,'gulatev');
Insert into PRODUCTOS (IDPRODUCTO,NOMBRE,CANTIDAD,COSTO,PRECIOVENTA,ID_PROVEEDOR,AUDITORIA) values (12,'Mochila estampada',10,20000,30000,7,'gulatev');
Insert into PRODUCTOS (IDPRODUCTO,NOMBRE,CANTIDAD,COSTO,PRECIOVENTA,ID_PROVEEDOR,AUDITORIA) values (13,'Estuche para celular con foto',20,3000,5000,3,'gulatev');
Insert into PRODUCTOS (IDPRODUCTO,NOMBRE,CANTIDAD,COSTO,PRECIOVENTA,ID_PROVEEDOR,AUDITORIA) values (14,'Mousepad personalizado',40,5000,8000,9,'gulatev');
Insert into PRODUCTOS (IDPRODUCTO,NOMBRE,CANTIDAD,COSTO,PRECIOVENTA,ID_PROVEEDOR,AUDITORIA) values (15,'Estuche para celular',50,7000,11000,8,'gulatev');
Insert into PRODUCTOS (IDPRODUCTO,NOMBRE,CANTIDAD,COSTO,PRECIOVENTA,ID_PROVEEDOR,AUDITORIA) values (16,'Blusa personalizado',30,6000,22000,5,'gulatev');
Insert into PRODUCTOS (IDPRODUCTO,NOMBRE,CANTIDAD,COSTO,PRECIOVENTA,ID_PROVEEDOR,AUDITORIA) values (17,'Camisa personalizado',25,6000,10000,6,'gulatev');
Insert into PRODUCTOS (IDPRODUCTO,NOMBRE,CANTIDAD,COSTO,PRECIOVENTA,ID_PROVEEDOR,AUDITORIA) values (18,'Chaqueta personalizada',35,18000,27000,7,'gulatev');
Insert into PRODUCTOS (IDPRODUCTO,NOMBRE,CANTIDAD,COSTO,PRECIOVENTA,ID_PROVEEDOR,AUDITORIA) values (19,'Uniforme escolar personalizada',45,15000,20000,8,'gulatev');
Insert into PRODUCTOS (IDPRODUCTO,NOMBRE,CANTIDAD,COSTO,PRECIOVENTA,ID_PROVEEDOR,AUDITORIA) values (20,'Llavero con foto',20,4000,6000,9,'gulatev');
Insert into PRODUCTOS (IDPRODUCTO,NOMBRE,CANTIDAD,COSTO,PRECIOVENTA,ID_PROVEEDOR,AUDITORIA) values (21,'Taza termosensible',65,8000,13000,10,'gulatev');
Insert into PRODUCTOS (IDPRODUCTO,NOMBRE,CANTIDAD,COSTO,PRECIOVENTA,ID_PROVEEDOR,AUDITORIA) values (22,'Botella de agua grabada',15,10000,16000,7,'gulatev');
Insert into PRODUCTOS (IDPRODUCTO,NOMBRE,CANTIDAD,COSTO,PRECIOVENTA,ID_PROVEEDOR,AUDITORIA) values (23,'Ropas tipicas personalizado',55,12000,20000,9,'gulatev');
Insert into PRODUCTOS (IDPRODUCTO,NOMBRE,CANTIDAD,COSTO,PRECIOVENTA,ID_PROVEEDOR,AUDITORIA) values (24,'Cojín pintada',35,15000,23000,5,'gulatev');
Insert into PRODUCTOS (IDPRODUCTO,NOMBRE,CANTIDAD,COSTO,PRECIOVENTA,ID_PROVEEDOR,AUDITORIA) values (25,'Almohada con mensaje',40,9000,15000,8,'gulatev');
Insert into PRODUCTOS (IDPRODUCTO,NOMBRE,CANTIDAD,COSTO,PRECIOVENTA,ID_PROVEEDOR,AUDITORIA) values (26,'PRUEBA1',3,5,10,1,'1');
commit;
REM INSERTING into PROVEEDORES
SET DEFINE OFF;

--inserción de datos en la tabla "PROVEEDORES"
Insert into PROVEEDORES (IDPROVEEDOR,NOMBRE,ASESOR,UBICACION,EMAIL,TELEFONO) values (1,'Arte Personalizado Sur','Juan Perez','San José, Costa Rica','info@artepersonalizado.com','+506 2222-1111');
Insert into PROVEEDORES (IDPROVEEDOR,NOMBRE,ASESOR,UBICACION,EMAIL,TELEFONO) values (2,'Creatividad Tica','Ana Rodriguez','Heredia, Costa Rica','ventas@creatividadtica.com','+506 2233-2222');
Insert into PROVEEDORES (IDPROVEEDOR,NOMBRE,ASESOR,UBICACION,EMAIL,TELEFONO) values (3,'Diseños Costa Rica','Carlos Gomez','Alajuela, Costa Rica','info@disenoscr.com','+506 2244-3333');
Insert into PROVEEDORES (IDPROVEEDOR,NOMBRE,ASESOR,UBICACION,EMAIL,TELEFONO) values (4,'Artesanías Pura Vida','Maria Fernandez','Guanacaste, Costa Rica','contacto@artesaniaspuravida.com','+506 2255-4444');
Insert into PROVEEDORES (IDPROVEEDOR,NOMBRE,ASESOR,UBICACION,EMAIL,TELEFONO) values (5,'Personaliza y Crea','Luisa Ramirez','Puntarenas, Costa Rica','info@personalizaycrea.com','+506 2266-5555');
Insert into PROVEEDORES (IDPROVEEDOR,NOMBRE,ASESOR,UBICACION,EMAIL,TELEFONO) values (6,'Creaciones CR','Pedro Lopez','Cartago, Costa Rica','ventas@creacionescr.com','+506 2277-6666');
Insert into PROVEEDORES (IDPROVEEDOR,NOMBRE,ASESOR,UBICACION,EMAIL,TELEFONO) values (7,'Detalles Encantados','Laura Gonzalez','Limón, Costa Rica','detalles@encantados.com','+506 2288-7777');
Insert into PROVEEDORES (IDPROVEEDOR,NOMBRE,ASESOR,UBICACION,EMAIL,TELEFONO) values (8,'Arte en tus Manos','Diego Martinez','San José, Costa Rica','ventas@arteentusmanos.com','+506 2299-8888');
Insert into PROVEEDORES (IDPROVEEDOR,NOMBRE,ASESOR,UBICACION,EMAIL,TELEFONO) values (9,'Personalizados CR','Gabriela Fernandez','Heredia, Costa Rica','info@personalizadoscr.com','+506 2300-9999');
Insert into PROVEEDORES (IDPROVEEDOR,NOMBRE,ASESOR,UBICACION,EMAIL,TELEFONO) values (10,'Diseños Originales','Pablo Soto','Alajuela, Costa Rica','contacto@disenosoriginales.com','+506 2311-0000');
commit;
REM INSERTING into USUARIOS
SET DEFINE OFF;
--inserción de datos en la tabla "USUARIOS"
Insert into USUARIOS (IDUSUARIO,CEDULA,NOMBRE,ROL,EMAIL,CONTRASENA) values (187,'PRUEBA3','PRUEBA3','Visualizador','PRUEBA3','PRUEBA3');
Insert into USUARIOS (IDUSUARIO,CEDULA,NOMBRE,ROL,EMAIL,CONTRASENA) values (11,'503897356','gulatev','Administrador','gulatev11@gmail.com','GulaTeV123');
Insert into USUARIOS (IDUSUARIO,CEDULA,NOMBRE,ROL,EMAIL,CONTRASENA) values (22,'597634125','mpoveda','Privilegiado','mpoveda22@gmail.com','MpoVeD@2023');
Insert into USUARIOS (IDUSUARIO,CEDULA,NOMBRE,ROL,EMAIL,CONTRASENA) values (33,'521136723','vulate','Visualizador','vulate33@gmail.com','VulateCR45');
Insert into USUARIOS (IDUSUARIO,CEDULA,NOMBRE,ROL,EMAIL,CONTRASENA) values (99,'PRUEBA12','PRUEBA1','Administrador','PRUEBA1','PRUEBA1');
Insert into USUARIOS (IDUSUARIO,CEDULA,NOMBRE,ROL,EMAIL,CONTRASENA) values (264,'1','1','Administrador','1','1');
Insert into USUARIOS (IDUSUARIO,CEDULA,NOMBRE,ROL,EMAIL,CONTRASENA) values (275,'2','2','Visualizador','2','2');
Insert into USUARIOS (IDUSUARIO,CEDULA,NOMBRE,ROL,EMAIL,CONTRASENA) values (286,'3','3','Privilegiado','3','3');
commit;
--------------------------------------------------------
--  DDL for Trigger MOVIMIENTO_INVENTARIO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "MOVIMIENTO_INVENTARIO" 
AFTER INSERT OR UPDATE OR DELETE ON Productos
FOR EACH ROW
BEGIN   
 -- Si se está insertando un nuevo registro en Productos
    IF INSERTING THEN 
        INSERT INTO MovimientoInventario (
            IdProducto,
            Nombre,
            Cantidad,
            Costo,
            precioVenta,
            NombreUsuario,
            Fecha,
            TipoMovimiento
        ) VALUES (
            :NEW.IdProducto,
            :NEW.Nombre,
            :NEW.Cantidad,
            :NEW.Costo,
            :NEW.precioVenta,
            :NEW.Auditoria,
            SYSDATE,
            'Inserción'
        );
         -- Si se está actualizando un registro en Productos
    ELSIF UPDATING THEN 
        INSERT INTO MovimientoInventario (
            IdProducto,
            Nombre,
            Cantidad,
            Costo,
            precioVenta,
            NombreUsuario,
            Fecha,
            TipoMovimiento
        ) VALUES (
            :OLD.IdProducto,
            :OLD.Nombre,
            :OLD.Cantidad,
            :OLD.Costo,
            :OLD.precioVenta,
            :OLD.Auditoria,
            SYSDATE,
            'Actualización'
        );
         -- Si se está eliminando un registro de Productos
    ELSIF DELETING THEN 
        INSERT INTO MovimientoInventario (
            IdProducto,
            Nombre,
            Cantidad,
            Costo,
            precioVenta,
            NombreUsuario,
            Fecha,
            TipoMovimiento
        ) VALUES (
            :OLD.IdProducto,
            :OLD.Nombre,
            :OLD.Cantidad,
            :OLD.Costo,
            :OLD.precioVenta,
            :OLD.Auditoria,
            SYSDATE,
            'Eliminación'
        );
    ELSE
     -- Si la transacción no es reconocida
        RAISE_APPLICATION_ERROR(-20001,'LA TRANSACCI�N NO ES RECONOCIDA');
    END IF;
END;
/
ALTER TRIGGER "MOVIMIENTO_INVENTARIO" ENABLE;
--------------------------------------------------------
--  DDL for Procedure AUMENTO_PRECIOVENTA
--------------------------------------------------------
/*Cursor que actualiza el precio de venta al producto con menor precio de venta de cada proveedor aumenta un 10% de su valor inicial a todos aquellos 
que su precio de venta se menor al promedio de todo los precio mas bajos de la tabla*/

set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "AUMENTO_PRECIOVENTA" 
IS  
    -- Declaración del cursor que obtiene los productos que cumplen con el criterio de precio.

    CURSOR obt_precio_venta
    IS  
        SELECT idproducto, id_proveedor, Min(precioVenta) PrecioMinimo FROM productos
        WHERE precioVenta <=    (   SELECT AVG(precioVentaMinimo) 
                                    FROM (  SELECT id_proveedor, Min(precioVenta) precioVentaMinimo 
                                            FROM productos GROUP BY id_proveedor
                                          )
                                )
        GROUP BY idproducto, id_proveedor
        HAVING (id_proveedor, Min(precioVenta)) IN (  SELECT id_proveedor, Min(precioVenta)
                                                    FROM productos
                                                    GROUP BY id_proveedor);
    -- Declaración de variables locales.
    v_precioActualizado number;
    produc obt_precio_venta%rowtype;

BEGIN
-- Apertura del cursor.
        OPEN obt_precio_venta;
    -- Inicio del bucle para procesar cada producto.
        LOOP 
            FETCH obt_precio_venta into produc;
            EXIT WHEN obt_precio_venta%notfound;
-- Actualización del precio de venta del producto.
                UPDATE productos
                SET   
                    precioVenta = produc.PrecioMinimo*1.10
                WHERE idproducto = produc.idproducto;
                COMMIT;-- Confirmación de la transacción.


        END LOOP;
        CLOSE obt_precio_venta;    -- Cierre del cursor.
-- Manejo de excepciones.
        EXCEPTION
        WHEN no_data_found THEN
            dbms_output.put_line('no se encontró ningún producto con el id especificado.');
        WHEN OTHERS THEN
            dbms_output.put_line('ocurrió un error al modificar el producto.');
END;

/
--------------------------------------------------------
--  DDL for Procedure ELIMINAR_CUENTA_PROVEEDOR
--------------------------------------------------------
-- Este procedimiento elimina una cuenta de proveedor de la tabla "cuentasproveedores" según el ID especificado.
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "ELIMINAR_CUENTA_PROVEEDOR" (
    p_idfacproveedor in number-- Parámetro de entrada: ID de la cuenta de proveedor a eliminar
)
is
begin
    -- Eliminación de la cuenta de proveedor según el ID especificado.
    delete from cuentasproveedores
    where idfacproveedor = p_idfacproveedor;

    commit;
exception
    when no_data_found then
        dbms_output.put_line('No se encontró ninguna cuenta de proveedor con el ID especificado.');
    when others then
        dbms_output.put_line('Ocurrió un error al eliminar la cuenta de proveedor.');
end eliminar_cuenta_proveedor;

/
--------------------------------------------------------
--  DDL for Procedure ELIMINAR_PRODUCTO
--------------------------------------------------------
-- Este procedimiento actualiza el campo de auditoría del producto y luego elimina el producto de la tabla "productos" según el ID especificado.
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "ELIMINAR_PRODUCTO" (
    p_idproducto in number,                 -- Parámetro de entrada: ID del producto a eliminar
    p_auditoria in productos.auditoria%type -- Parámetro de entrada: Valor de auditoría para actualizar
)
is
begin
    -- Actualización del campo de auditoría del producto.
    update productos set auditoria = p_auditoria where idproducto = p_idproducto;
        -- Eliminación del producto según el ID especificado.
    delete from productos where idproducto = p_idproducto;
    commit;
exception
    when no_data_found then
        dbms_output.put_line('no se encontró ningún producto con el id especificado.');
    when others then
        dbms_output.put_line('ocurrió un error al eliminar el producto.');
end eliminar_producto;

/
--------------------------------------------------------
--  DDL for Procedure ELIMINAR_PROVEEDOR
--------------------------------------------------------
-- Este procedimiento elimina un proveedor de la tabla "proveedores" según el ID especificado.
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "ELIMINAR_PROVEEDOR" (
    p_idproveedor in number-- Parámetro de entrada: ID del proveedor a eliminar
)
is
begin
-- Eliminación del proveedor según el ID especificado.
    delete from proveedores where idproveedor = p_idproveedor;
    commit;
exception
    when no_data_found then
        dbms_output.put_line('no se encontró ningún proveedor con el id especificado.');
    when others then
        dbms_output.put_line('ocurrió un error al eliminar el proveedor.');
end eliminar_proveedor;

/
--------------------------------------------------------
--  DDL for Procedure ELIMINAR_USUARIO
--------------------------------------------------------
-- Este procedimiento elimina un usuario de la tabla "Usuarios" según el ID especificado.
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "ELIMINAR_USUARIO" (
    p_idUsuario in number-- Parámetro de entrada: ID del usuario a eliminar
)
is
begin
-- Eliminación del usuario según el ID especificado.
    delete from Usuarios where IDUSUARIO = p_idUsuario;
    commit;

exception
    when NO_DATA_FOUND then
        DBMS_OUTPUT.PUT_LINE('No se encontró ningún usuario con el ID especificado.');
    when others then
        DBMS_OUTPUT.PUT_LINE('Ocurrió un error al eliminar el usuario.');
end ELIMINAR_Usuario;

/
--------------------------------------------------------
--  DDL for Procedure INSERTAR_FACTURAS
--------------------------------------------------------
-- Este procedimiento inserta una nueva factura en la tabla "cuentasproveedores" con la información proporcionada.
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "INSERTAR_FACTURAS" (
    p_idproveedor IN NUMBER,-- Parámetro de entrada: ID del proveedor
    p_monto IN NUMBER       -- Parámetro de entrada: monto de la factura
)
IS
BEGIN
 -- Inserta una nueva factura en la tabla "cuentasproveedores"
    INSERT INTO cuentasproveedores(IDFACPROVEEDOR, ID_PROVEEDOR, FECHA_EMISION, MONTO, METODOPAGO)
    VALUES (seq_idFactura.NextVAL, p_idproveedor, SYSDATE, p_monto, 'Efectivo');
    COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure INSERTAR_PRODUCTOS
--------------------------------------------------------
/* Este procedimiento inserta un nuevo producto en la tabla "Productos" con la información proporcionada y
luego llama al procedimiento "insertar_facturas" para registrar una factura asociada al proveedor.*/

set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "INSERTAR_PRODUCTOS" (
    p_cantidad IN NUMBER,-- Parámetro de entrada: cantidad de productos
    p_id_proveedor IN NUMBER,-- Parámetro de entrada: ID del proveedor
    p_nombre IN VARCHAR2,-- Parámetro de entrada: nombre del producto
    p_costo IN FLOAT,-- Parámetro de entrada: costo del producto
    p_precioventa IN FLOAT, -- Parámetro de entrada: precio de venta del producto
    p_auditoria IN VARCHAR2-- Parámetro de entrada: auditoría del producto
)
IS
BEGIN
-- Inserta un nuevo producto en la tabla "Productos"
    INSERT INTO Productos(IdProducto, Nombre, Cantidad, Costo, precioVenta, ID_Proveedor, Auditoria)
    VALUES (seq_idProducto.NextVAL, p_nombre, p_cantidad, p_costo, p_precioventa, p_id_proveedor, p_auditoria);
    COMMIT;
    -- Llama al procedimiento "insertar_facturas" para registrar una factura asociada al proveedor
    insertar_facturas(p_id_proveedor,(p_cantidad*p_costo));
END Insertar_Productos;

/
--------------------------------------------------------
--  DDL for Procedure INSERTAR_PROVEEDORES
--------------------------------------------------------
-- Este procedimiento inserta un nuevo proveedor en la tabla "Proveedores" con la información proporcionada.

set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "INSERTAR_PROVEEDORES" (
    p_nombre IN VARCHAR2,-- Parámetro de entrada: nombre del proveedor
    p_asesor IN VARCHAR2, -- Parámetro de entrada: nombre del asesor del proveedor
    p_ubicacion IN VARCHAR2,-- Parámetro de entrada: ubicación del proveedor
    p_email IN VARCHAR2,-- Parámetro de entrada: correo electrónico del proveedor
    p_telefono IN VARCHAR2-- Parámetro de entrada: número de teléfono del proveedor
)
IS
BEGIN
    INSERT INTO Proveedores(IDPROVEEDOR, NOMBRE, ASESOR, UBICACION, EMAIL, TELEFONO)
    VALUES (seq_idProveedor.NextVAL, p_nombre, p_asesor, p_ubicacion, p_email, p_telefono);
    COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure INSERTAR_USUARIO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "INSERTAR_USUARIO" (
    p_cedula IN VARCHAR2,
    p_nombre IN VARCHAR2,
    p_rol IN VARCHAR2,
    p_email IN VARCHAR2,
    p_contrasena IN VARCHAR2
)
IS
BEGIN
-- Inserta un nuevo proveedor en la tabla "Proveedores"
    INSERT INTO usuarios(idusuario,cedula,nombre,rol,email,contrasena)
    VALUES (seq_idUsuario.NextVAL,p_cedula,p_nombre,p_rol,p_email,p_contrasena);
    COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure MODIFICAR_CUENTA_PROVEEDOR
--------------------------------------------------------
-- Este procedimiento modifica una cuenta de proveedor en la tabla "cuentasproveedores" con la información proporcionada.

set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "MODIFICAR_CUENTA_PROVEEDOR" (
    p_idfacproveedor in number,-- Parámetro de entrada: ID de la cuenta de proveedor a modificar
    p_monto in float,       -- Parámetro de entrada: nuevo monto de la cuenta
    p_metodopago in varchar2    -- Parámetro de entrada: nuevo método de pago
)
is
begin
    -- Actualiza los campos de monto y método de pago de la cuenta de proveedor
    update cuentasproveedores
    set 
        monto = p_monto,
        metodopago = p_metodopago
    where idfacproveedor = p_idfacproveedor;

    commit;
exception
    when no_data_found then
        dbms_output.put_line('No se encontró ninguna cuenta de proveedor con el ID especificado.');
    when others then
        dbms_output.put_line('Ocurrió un error al modificar la cuenta de proveedor.');
end modificar_cuenta_proveedor;

/
--------------------------------------------------------
--  DDL for Procedure MODIFICAR_PRODUCTO
--------------------------------------------------------
-- Este procedimiento modifica un producto en la tabla "Productos" con la información proporcionada.
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "MODIFICAR_PRODUCTO" (
    p_idproducto in number, -- Parámetro de entrada: ID del producto a modificar
    p_cantidad in number,-- Parámetro de entrada: nueva cantidad del producto
    p_id_proveedor in number,-- Parámetro de entrada: nuevo ID del proveedor del producto
    p_nombre in varchar2,-- Parámetro de entrada: nuevo nombre del producto
    p_costo in float,-- Parámetro de entrada: nuevo costo del producto
    p_precioventa in float,-- Parámetro de entrada: nuevo precio de venta del producto
    p_auditoria IN VARCHAR2-- Parámetro de entrada: nueva auditoría del producto
)
is
begin
-- Actualiza los campos del producto con los nuevos valores proporcionados
    UPDATE Productos
    SET Cantidad = p_cantidad,
        ID_Proveedor = p_id_proveedor,
        Nombre = p_nombre,
        Costo = p_costo,
        PrecioVenta = p_precioventa,
        Auditoria = p_auditoria
    WHERE IdProducto = p_idproducto;

    commit;
    dbms_output.put_line('producto modificado correctamente.');
exception
    when no_data_found then
        dbms_output.put_line('no se encontró ningún producto con el id especificado.');
    when others then
        dbms_output.put_line('ocurrió un error al modificar el producto.');
end modificar_producto;

/
--------------------------------------------------------
--  DDL for Procedure MODIFICAR_PROVEEDOR
--------------------------------------------------------
-- Este procedimiento modifica un proveedor en la tabla "Proveedores" con la información proporcionada.
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "MODIFICAR_PROVEEDOR" (
    p_idproveedor in number, -- Parámetro de entrada: ID del proveedor a modificar
    p_nombre in varchar2,-- Parámetro de entrada: nuevo nombre del proveedor
    p_asesor in varchar2,-- Parámetro de entrada: nuevo asesor del proveedor
    p_ubicacion in varchar2, -- Parámetro de entrada: nueva ubicación del proveedor
    p_email in varchar2,-- Parámetro de entrada: nuevo correo electrónico del proveedor
    p_telefono in varchar2-- Parámetro de entrada: nuevo número de teléfono del proveedor
)
is
begin
 -- Actualiza los campos del proveedor con los nuevos valores proporcionados
    update proveedores
    set nombre = p_nombre,
        asesor = p_asesor,
        ubicacion = p_ubicacion,
        email = p_email,
        telefono = p_telefono
    where idproveedor = p_idproveedor;

    commit;
exception
    when no_data_found then
        dbms_output.put_line('no se encontró ningún proveedor con el id especificado.');
    when others then
        dbms_output.put_line('ocurrió un error al modificar el proveedor.');
end modificar_proveedor;

/
--------------------------------------------------------
--  DDL for Procedure MODIFICAR_USUARIO
--------------------------------------------------------
-- Este procedimiento modifica un usuario en la tabla "Usuarios" con la información proporcionada.
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "MODIFICAR_USUARIO" (
    p_idusuario in number,-- Parámetro de entrada: ID del usuario a modificar
    p_cedula in varchar2,-- Parámetro de entrada: nueva cédula del usuario
    p_nombre in varchar2,-- Parámetro de entrada: nuevo nombre del usuario
    p_rol in varchar2,-- Parámetro de entrada: nuevo rol del usuario
    p_email in varchar2,-- Parámetro de entrada: nuevo correo electrónico del usuario
    p_contrasena in varchar2-- Parámetro de entrada: nueva contraseña del usuario
)
is
begin
    -- Actualiza los campos del usuario con los nuevos valores proporcionados
    update usuarios
    set cedula = p_cedula,
        nombre = p_nombre,
        rol = p_rol,
        email = p_email,
        contrasena = p_contrasena
    where idusuario = p_idusuario;

    commit;-- Confirma la transacción
exception
    when no_data_found then
        dbms_output.put_line('no se encontró ningún usuario con el id especificado.');
    when others then
        dbms_output.put_line('ocurrió un error al modificar el usuario.');
end modificar_usuario;

/
--------------------------------------------------------
--  DDL for Procedure REBAJA_PRECIOVENTA
--------------------------------------------------------
/*Cursor que actualiza el precio de venta al producto con mayor precio de venta de cada proveedor disminuyendoles un 10% de su valor inicial a todos aquellos 
que su precio de venta sae mayor al promedio de todo los precio venta mas altos de la tabla*/
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "REBAJA_PRECIOVENTA" 
IS  
    -- Declara un cursor para obtener los productos que cumplen con ciertos criterios de precio de venta.

    CURSOR obt_precio_venta
    IS  
        SELECT idproducto, id_proveedor, Max(precioVenta) PrecioMaximo FROM productos
        WHERE precioVenta >=    (   SELECT AVG(precioVentaMaximo) 
                                    FROM (  SELECT id_proveedor, MAX(precioVenta) precioVentaMaximo 
                                            FROM productos GROUP BY id_proveedor
                                          )
                                )
        GROUP BY idproducto, id_proveedor
        HAVING (id_proveedor, Max(precioVenta)) IN (  SELECT id_proveedor, Max(precioVenta)
                                                    FROM productos
                                                    GROUP BY id_proveedor);

    v_precioActualizado number;
    produc obt_precio_venta%rowtype;

BEGIN
    -- Abre el cursor para obtener los productos que cumplen con los criterios de precio de venta.
        OPEN obt_precio_venta;
    -- Bucle para recorrer los productos seleccionados.
        LOOP 
            FETCH obt_precio_venta into produc;
            EXIT WHEN obt_precio_venta%notfound;

        -- Actualiza el precio de venta del producto aplicando una rebaja del 10%.
                UPDATE productos
                SET   
                    precioVenta = produc.PrecioMaximo-(produc.PrecioMaximo*0.10)
                WHERE idproducto = produc.idproducto;
                COMMIT; 

        END LOOP;
            -- Cierra el cursor.
        CLOSE obt_precio_venta;

        EXCEPTION
        WHEN no_data_found THEN
            dbms_output.put_line('no se encontró ningún producto con el id especificado.');
        WHEN OTHERS THEN
            dbms_output.put_line('ocurrió un error al modificar el producto.');
END;

/
--------------------------------------------------------
--  DDL for Function CALCULAR_CANTIDAD_PRODUCTOS_PROVEEDOR
--------------------------------------------------------
-- Esta función calcula la cantidad total de productos suministrados por un proveedor específico.

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "CALCULAR_CANTIDAD_PRODUCTOS_PROVEEDOR" (
-- Se define el parámetro de entrada para el ID del proveedor
    p_id_proveedor IN NUMBER
)
-- Se especifica que la función devuelve un valor de tipo NUMBER
RETURN NUMBER
IS
-- Se declara una variable local para almacenar la cantidad de productos
    cantidad_productos NUMBER;
--se abre el codigo para realizar la consulta
BEGIN
-- Se realiza la consulta para obtener la suma de la cantidad de productos
    SELECT SUM(cantidad)-- Se suma la cantidad de productos
    INTO cantidad_productos -- Se almacena el resultado en la variable local
    FROM Productos -- Se selecciona la tabla Productos
    WHERE id_Proveedor = p_id_proveedor; -- Se filtra por el ID del proveedor pasado como parámetro
-- Se devuelve la cantidad total de productos del proveedor
    RETURN cantidad_productos;
END;

/
--------------------------------------------------------
--  DDL for Function INICIOSESION
--------------------------------------------------------
-- Esta función se utiliza para iniciar sesión de un usuario en el sistema.


  CREATE OR REPLACE NONEDITIONABLE FUNCTION "INICIOSESION" 
(
        -- Se define el parámetro de entrada para la cédula del usuario
    Fcedula usuarios.cedula%type,
        -- Se define el parámetro de entrada para la contraseña del usuario
    Fcontrasena usuarios.cedula%type
)
-- Se especifica que la función devuelve un cursor
return SYS_REFCURSOR is 
-- Se declara el cursor que se utilizará para devolver los resultados de la consulta
listar_cursor SYS_REFCURSOR;
begin
    -- Se abre el cursor para seleccionar los datos del usuario cuya cédula y contraseña coinciden
    open listar_cursor for
        select * from usuarios where cedula = Fcedula AND contrasena = Fcontrasena;
            -- Se devuelve el cursor
    return listar_cursor;
end InicioSesion; 

/
--------------------------------------------------------
--  DDL for Function LISTAR_CUENTAS_PROVEEDORES
--------------------------------------------------------
-- Esta función devuelve un cursor que contiene la lista de cuentas de proveedores junto con el nombre del proveedor asociado.

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "LISTAR_CUENTAS_PROVEEDORES" 
return sys_refcursor
is
-- Se declara el cursor que se utilizará para devolver los resultados de la consulta
    lista_cursor sys_refcursor;
begin
    -- Se abre el cursor para seleccionar los datos de las cuentas de proveedores junto con el nombre del proveedor asociado
    open lista_cursor for
        select c.*, p.nombre Proveedor
        from cuentasproveedores c 
        inner join proveedores p
        on p.idProveedor = c.id_proveedor;
    -- Se devuelve el cursor
    return lista_cursor;
end listar_cuentas_proveedores;

/
--------------------------------------------------------
--  DDL for Function LISTAR_CUENTAS_PROVEEDORES_UNI
--------------------------------------------------------
-- Esta función devuelve un cursor que contiene la información de una cuenta de proveedor específica identificada por su ID de factura.


  CREATE OR REPLACE NONEDITIONABLE FUNCTION "LISTAR_CUENTAS_PROVEEDORES_UNI" 
(
        -- Se define el parámetro de entrada para el ID de factura de proveedor
    v_idfacproveedor cuentasproveedores.idfacproveedor%type
)
-- Se especifica que la función devuelve un cursor
return sys_refcursor
is
    -- Se declara el cursor que se utilizará para devolver los resultados de la consulta
    lista_cursor sys_refcursor;
begin
    -- Se abre el cursor para seleccionar los datos de la cuenta de proveedor específica identificada por su ID de factura
    open lista_cursor for
        select * from cuentasproveedores
        where idfacproveedor = v_idfacproveedor;

    return lista_cursor;
end listar_cuentas_proveedores_uni;

/
--------------------------------------------------------
--  DDL for Function LISTAR_MOVIMIENTOS_INVENTARIO
--------------------------------------------------------
-- Esta función devuelve un cursor que contiene todos los movimientos de inventario registrados en la base de datos.

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "LISTAR_MOVIMIENTOS_INVENTARIO" 
  -- No tiene parámetros de entrada
return sys_refcursor
is
    -- Se declara el cursor que se utilizará para devolver los resultados de la consulta
    lista_cursor sys_refcursor;
begin
    -- Se abre el cursor para seleccionar todos los movimientos de inventario
    open lista_cursor for
        select * from MovimientoInventario;
    -- Se devuelve el cursor
    return lista_cursor;
end listar_movimientos_inventario;

/
--------------------------------------------------------
--  DDL for Function LISTAR_PRODUCTOS
--------------------------------------------------------
-- Esta función devuelve un cursor que contiene la lista de todos los productos junto con el nombre del proveedor al que pertenecen.

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "LISTAR_PRODUCTOS" 
RETURN SYS_REFCURSOR IS
    -- Se declara el cursor que se utilizará para devolver los resultados de la consulta
    lista_cursor SYS_REFCURSOR;
BEGIN
    -- Se abre el cursor para seleccionar todos los productos junto con el nombre del proveedor
    OPEN lista_cursor FOR
        SELECT p.*, pv.nombre nombreProveedor 
        FROM Productos p 
        INNER JOIN proveedores pv 
        ON pv.idProveedor = p.id_Proveedor ;

    RETURN lista_cursor;
END listar_Productos;

/
--------------------------------------------------------
--  DDL for Function LISTAR_PRODUCUNI
--------------------------------------------------------
-- Esta función devuelve un cursor que contiene la información de un producto específico junto con el nombre del proveedor al que pertenece.

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "LISTAR_PRODUCUNI" 
(
    -- Tiene un parámetro de entrada: el ID del producto (FidProducto)
    FidProducto productos.idProducto%type
)
-- La función devuelve un cursor SYS_REFCURSOR
RETURN SYS_REFCURSOR IS
    -- Se declara el cursor que se utilizará para devolver los resultados de la consulta
    lista_cursor SYS_REFCURSOR;
BEGIN
    -- Se abre el cursor para seleccionar la información del producto específico junto con el nombre del proveedor
    OPEN lista_cursor FOR
        SELECT p.*, pv.nombre nombreProveedor 
        FROM Productos p 
        INNER JOIN proveedores pv 
        ON pv.idProveedor = p.id_Proveedor 
        WHERE p.idProducto = FidProducto;

    RETURN lista_cursor;
END listar_ProducUni;

/
--------------------------------------------------------
--  DDL for Function LISTAR_PROVEEDORES
--------------------------------------------------------
-- Esta función devuelve un cursor que contiene la lista de todos los proveedores registrados en el sistema.

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "LISTAR_PROVEEDORES" 
RETURN SYS_REFCURSOR IS
    -- Declaración del cursor que se utilizará para devolver los resultados de la consulta
    lista_cursor SYS_REFCURSOR;
BEGIN
    -- Abre el cursor para seleccionar todos los registros de la tabla Proveedores
    OPEN lista_cursor FOR
        SELECT * FROM Proveedores;

    RETURN lista_cursor;
END listar_Proveedores;

/
--------------------------------------------------------
--  DDL for Function LISTAR_PROVEEDOREUNI
--------------------------------------------------------

-- Esta función devuelve un cursor que contiene la información de un proveedor específico identificado por su ID de proveedor.

CREATE OR REPLACE NONEDITIONABLE FUNCTION "LISTAR_PROVEEDOREUNI" 
(
    -- Parámetro de entrada: ID del proveedor que se va a buscar
    f_idProveedor proveedores.idProveedor%type
)
-- La función devuelve un cursor que contendrá el resultado de la consulta
RETURN SYS_REFCURSOR IS
    -- Declaración del cursor que se utilizará para devolver los resultados de la consulta
    lista_cursor SYS_REFCURSOR;
BEGIN
    -- Abre el cursor para seleccionar el proveedor con el ID especificado
    OPEN lista_cursor FOR
        SELECT * FROM Proveedores
        WHERE idProveedor = f_idProveedor;

    -- Devuelve el cursor que contiene la información del proveedor
    RETURN lista_cursor;
END listar_ProveedoreUni;

/
--------------------------------------------------------
--  DDL for Function LISTAR_USUARIOS
--------------------------------------------------------

-- Esta función devuelve un cursor que contiene la información de todos los usuarios en la base de datos.

CREATE OR REPLACE NONEDITIONABLE FUNCTION "LISTAR_USUARIOS" 
-- No hay parámetros de entrada para esta función.

-- La función devuelve un cursor que contendrá el resultado de la consulta.
RETURN SYS_REFCURSOR IS
    -- Declaración del cursor que se utilizará para devolver los resultados de la consulta.
    lista_cursor SYS_REFCURSOR;
BEGIN
    -- Abre el cursor para seleccionar todos los usuarios.
    OPEN lista_cursor FOR
        SELECT * FROM Usuarios;

    -- Devuelve el cursor que contiene la información de todos los usuarios.
    RETURN lista_cursor;
END listar_usuarios;

/

--------------------------------------------------------
--  DDL for Function LISTAR_USUARIOUNI
--------------------------------------------------------

-- Esta función devuelve un cursor que contiene la información de un usuario específico en la base de datos, identificado por su ID de usuario.

CREATE OR REPLACE NONEDITIONABLE FUNCTION "LISTAR_USUARIOUNI" 
-- La función tiene un parámetro de entrada que especifica el ID del usuario del cual se desea obtener la información.
(
    FidUsuario usuarios.idUsuario%type
)
-- La función devuelve un cursor que contendrá el resultado de la consulta.
RETURN SYS_REFCURSOR IS
    -- Declaración del cursor que se utilizará para devolver los resultados de la consulta.
    lista_cursor SYS_REFCURSOR;
BEGIN
    -- Abre el cursor para seleccionar el usuario con el ID proporcionado.
    OPEN lista_cursor FOR
        SELECT * FROM Usuarios WHERE idUsuario = FidUsuario;

    -- Devuelve el cursor que contiene la información del usuario especificado.
    RETURN lista_cursor;
END Listar_UsuarioUni;

/

--------------------------------------------------------
--  DDL for Function OBTENERSALDOTOTALPROVEEDOR
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "OBTENERSALDOTOTALPROVEEDOR" ( 
--se toma un parametro de entrada
    p_IdProveedor IN NUMBER 

) 
--se devuelve un valor de tipo float ya que es sobre dinero
RETURN FLOAT 
--se declara una variable local 
IS 
    v_SaldoTotal FLOAT; 
--comienza el bloque de codigo donde sea realiza la consulta para el obtener el saldo total
BEGIN 
--La consulta suma todos los montos de las cuentas del proveedor especificado 
    SELECT SUM(Monto) 
    INTO v_SaldoTotal 
    FROM CuentasProveedores 
    WHERE ID_Proveedor = p_IdProveedor; 
--Devuelve el valor calculado del saldo total del proveedor como resultado de la función.  
    RETURN v_SaldoTotal; 
--finaliza el bloque de codigo
END ObtenerSaldoTotalProveedor; 

/
--------------------------------------------------------
--  DDL for Function PRIMERA_VISTA
--------------------------------------------------------

-- Esta función devuelve un cursor que contiene la primera vista del sistema, que muestra los productos cuyo precio de venta es mayor que el promedio.

CREATE OR REPLACE NONEDITIONABLE FUNCTION "PRIMERA_VISTA" 
-- No tiene parámetros de entrada.
RETURN SYS_REFCURSOR IS
    -- Declaración del cursor que se utilizará para devolver los resultados de la consulta.
    lista_cursor SYS_REFCURSOR;
BEGIN
    -- Abre el cursor para seleccionar los datos de la primera vista.
    OPEN lista_cursor FOR
        SELECT * FROM productospreciomayorpromedio;

    -- Devuelve el cursor que contiene los datos de la primera vista.
    RETURN lista_cursor;
END primera_vista;

/

--------------------------------------------------------
--  DDL for Function SEGUNDA_VISTA
--------------------------------------------------------

-- Esta función devuelve un cursor que contiene la segunda vista del sistema, que muestra los productos cuyo precio de venta es menor que el promedio.

CREATE OR REPLACE NONEDITIONABLE FUNCTION "SEGUNDA_VISTA" 
-- No tiene parámetros de entrada.
RETURN SYS_REFCURSOR IS
    -- Declaración del cursor que se utilizará para devolver los resultados de la consulta.
    lista_cursor SYS_REFCURSOR;
BEGIN
    -- Abre el cursor para seleccionar los datos de la segunda vista.
    OPEN lista_cursor FOR
        SELECT * FROM productoPrecioMenor;

    -- Devuelve el cursor que contiene los datos de la segunda vista.
    RETURN lista_cursor;
END segunda_vista;

/

--------------------------------------------------------
--  DDL for Function TERCERA_VISTA
--------------------------------------------------------

-- Esta función devuelve un cursor que contiene la tercera vista del sistema, que muestra los productos cuyo precio de venta es mayor que el promedio.

CREATE OR REPLACE NONEDITIONABLE FUNCTION "TERCERA_VISTA" 
-- La función no tiene parámetros de entrada.
RETURN SYS_REFCURSOR IS
    -- Declaración del cursor que se utilizará para devolver los resultados de la consulta.
    lista_cursor SYS_REFCURSOR;
BEGIN
    -- Abre el cursor para seleccionar los datos de la tercera vista.
    OPEN lista_cursor FOR
        SELECT * FROM productoPrecioMayor;

    -- Devuelve el cursor que contiene los datos de la tercera vista.
    RETURN lista_cursor;
END tercera_vista;

/
--------------------------------------------------------
--  Constraints for Table PRODUCTOS
--------------------------------------------------------
-- Esta sección define las restricciones para la tabla PRODUCTOS, asegurando la integridad de los datos.

-- Modifica la columna IDPRODUCTO para que no permita valores nulos.
ALTER TABLE "PRODUCTOS" MODIFY ("IDPRODUCTO" NOT NULL ENABLE);

-- Agrega una restricción de clave primaria a la columna IDPRODUCTO.
ALTER TABLE "PRODUCTOS" ADD PRIMARY KEY ("IDPRODUCTO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PROYECTOPROGRA"  ENABLE;

--------------------------------------------------------
--  Constraints for Table PROVEEDORES
--------------------------------------------------------
-- Esta sección define las restricciones para la tabla PROVEEDORES, asegurando la integridad de los datos.

-- Modifica la columna IDPROVEEDOR para que no permita valores nulos.
ALTER TABLE "PROVEEDORES" MODIFY ("IDPROVEEDOR" NOT NULL ENABLE);

-- Agrega una restricción de clave primaria a la columna IDPROVEEDOR.
ALTER TABLE "PROVEEDORES" ADD PRIMARY KEY ("IDPROVEEDOR")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PROYECTOPROGRA"  ENABLE;

--------------------------------------------------------
--  Constraints for Table USUARIOS
--------------------------------------------------------
-- Esta sección define las restricciones para la tabla USUARIOS, asegurando la integridad de los datos.

-- Modifica la columna IDUSUARIO para que no permita valores nulos.
ALTER TABLE "USUARIOS" MODIFY ("IDUSUARIO" NOT NULL ENABLE);

-- Agrega una restricción de clave primaria a la columna IDUSUARIO.
ALTER TABLE "USUARIOS" ADD PRIMARY KEY ("IDUSUARIO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PROYECTOPROGRA"  ENABLE;

--------------------------------------------------------
--  Constraints for Table MOVIMIENTOINVENTARIO
--------------------------------------------------------

  -- Esta sentencia modifica la columna IDMOVIMIENTO para que no permita valores nulos.
ALTER TABLE "MOVIMIENTOINVENTARIO" MODIFY ("IDMOVIMIENTO" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table CUENTASPROVEEDORES
--------------------------------------------------------
-- Esta sentencia modifica la columna IDFACPROVEEDOR para que no permita valores nulos.
ALTER TABLE "CUENTASPROVEEDORES" MODIFY ("IDFACPROVEEDOR" NOT NULL ENABLE);

-- Esta sentencia agrega una clave primaria a la columna IDFACPROVEEDOR.
ALTER TABLE "CUENTASPROVEEDORES" ADD PRIMARY KEY ("IDFACPROVEEDOR")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PROYECTOPROGRA"  ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table CUENTASPROVEEDORES
--------------------------------------------------------
-- Esta sentencia establece una restricción de clave externa en la tabla CUENTASPROVEEDORES,
-- vinculando la columna ID_PROVEEDOR con la columna IDPROVEEDOR en la tabla PROVEEDORES.
-- Esto garantiza que cada ID de proveedor en CUENTASPROVEEDORES corresponda a un ID de proveedor válido en PROVEEDORES.
ALTER TABLE "CUENTASPROVEEDORES" ADD CONSTRAINT "ID_PROVEEDOR" FOREIGN KEY ("ID_PROVEEDOR")
    REFERENCES "PROVEEDORES" ("IDPROVEEDOR") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table PRODUCTOS
--------------------------------------------------------
-- Esta sentencia establece una restricción de clave externa en la tabla PRODUCTOS,
-- vinculando la columna ID_PROVEEDOR con la columna IDPROVEEDOR en la tabla PROVEEDORES.
-- Esto garantiza que cada ID de proveedor en PRODUCTOS corresponda a un ID de proveedor válido en PROVEEDORES.
ALTER TABLE "PRODUCTOS" ADD CONSTRAINT "FK_ID_PROVEEDOR" FOREIGN KEY ("ID_PROVEEDOR")
    REFERENCES "PROVEEDORES" ("IDPROVEEDOR") ENABLE;
